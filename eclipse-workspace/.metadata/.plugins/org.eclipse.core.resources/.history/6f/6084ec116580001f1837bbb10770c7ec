package com.shinhan.day05;

import java.util.Arrays;
import java.util.Comparator;

//comparator는 interface : interface 는 추상메서드들로 이루어진다.
//추상메서드는 정의는 있고 구현은 없다.
class MySort implements Comparator<Integer> { // 구현한다는 의미. 제네릭 사용해서 크기비교
	@Override
	public int compare(Integer a, Integer b) {
		// < = >
		// ascending 앞-뒤
		// descending 뒤-앞
		return b - a;
	}
}

public class 놀이공원티켓판매 {

	public static void main(String[] args) {
		// f1();
		// f2();
		// f3();
		// f4();
		f5();
	}

	private static void f5() {
		int[][] arr2 = { { 2, 3 }, { 1, 7 }, { 2, 4 }, { 3, 5 } };
		print("-----[before]----", arr2);
		//sort
		for(int i=0; i<arr2.length-1;i++) {
			for(int j = i+1;j<arr2.length;j++) {
				if(arr2[i][0]>arr2[j][0] ||arr2[i][0]==arr2[j][0] && arr2[i][1]<arr2[j][1] ) {
					//바꾸기
					int[] temp = arr2[i];
					arr2[i] = arr2[j];
					arr2[j] = temp;
				}
			}
		}
		print("-----[after]----", arr2);
	}

	private static void print(String title, int[][] arr2) {
		System.out.println(title);
		for (int[] arr1 : arr2) {
			System.out.println(Arrays.toString(arr1));
		}
	}

	private static void f4() {
		// 1차원배열의 정렬
		String[] arr = { "java", "sql", "web" };
		System.out.println("before" + Arrays.toString(arr));
		Arrays.sort(arr); // 기본sort설정은 ascending이다.
		System.out.println("after" + Arrays.toString(arr));
	}

	private static void f3() {
		// 1차원배열의 정렬
		char[] arr = { 'a', 'A', 'z', 'C', 'f' };
		System.out.println("before" + Arrays.toString(arr));
		Arrays.sort(arr); // 기본sort설정은 ascending이다.
		System.out.println("after" + Arrays.toString(arr));
	}

	private static void f2() {
		// 1차원배열의 정렬
//	int[] arr = { 10, 3, 34, 50, 5 };
		Integer[] arr = { 10, 3, 34, 50, 5 };

		System.out.println("before" + Arrays.toString(arr));
		Arrays.sort(arr); // 기본sort설정은 ascending이다.

		Arrays.sort(arr, new MySort());
		// Arrays.sort(null, null); //인터페이스를 구현한다.

		System.out.println("after" + Arrays.toString(arr));
	}
	/*
	 * private static void f2() { // 1차원배열의 정렬 Integer[] arr = { 10, 3, 34, 50, 5 };
	 * //Arrays,sort(arr, new MySort()); --> 디센딩 구현한걸 가져온다. Arrays.sort(arr.new
	 * Comparator<Integer a,Integer b >() { return b-a } //일시적으로 만들었다가 없앨 수 있다.
	 * 익명구현클래스. //Araays.sort(arr,(a-b)->b-a); System.out.println("after" +
	 * Arrays.toString(arr)); }
	 */

	private static void f1() {
		// 1차원배열의 정렬
		int[] arr = { 10, 3, 34, 50, 5 };
		System.out.println("before" + Arrays.toString(arr));
		for (int i = 0; i < arr.length - 1; i++) {
			for (int j = i + 1; j < arr.length; j++) { // ascending 오름차순, 작은수치가 앞에.
				// descending 내림차순,부호만 바꾸면 됨.
				if (arr[i] > arr[j]) {
					int temp = arr[i];
					arr[i] = arr[j];
					arr[j] = temp;
				}
			}
		}
		System.out.println("after" + Arrays.toString(arr));
	}
	/*
	 * public class 놀이공원티켓판매 { public static void main(String[] args) { int[]
	 * tickets = { 10, 8, 20000 }; int[][][] requests = { { { 2, 3 }, { 1, 7 }, { 2,
	 * 4 }, { 3, 5 } }, { { 1, 9 }, { 3, 6 }, { 2, 5 } }, { { 3, 1 }, { 2, 5 }, { 2,
	 * 10 }, { 3, 8 }, { 1, 2 } } };
	 * 
	 * for (int testcast = 0; testcast < tickets.length; testcast++) {
	 * 
	 * System.out.println("-------------------testcast[" + testcast + "]"); int
	 * result = solution(tickets[testcast], requests[testcast]);
	 * System.out.println(result);
	 * 
	 * for(int[] arr:requests[testcast]) { System.out.println(Arrays.toString(arr));
	 * } } } }
	 */

}
