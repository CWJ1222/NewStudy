package com.shinhan.day02;

import java.util.Scanner;

public class 연산자 {

	public static void main(String[] args) {
		// method1();
		// method2();
		// method3();
		// method4();
		method5();
		method6();

	}

	private static void method6() {
		Scanner sc = new Scanner(System.in);
		System.out.println("나눌수, 나누는수 입력>>");
		int a = sc.nextInt();
		double b = sc.nextDouble();
		double result = 0;
		result = a / b;
		System.out.println(result);
		sc.close();
	}

	private static void method5() {
		Scanner sc = new Scanner(System.in);
		System.out.println("나눌수, 나누는수 입력>>");
		int a = sc.nextInt();
		int b = sc.nextInt();
		int result = 0;
		// if(b!=0) {result a/b;}
		try {
			result = a / b; // 오류발생 -> 자바가상머신이 Exception객체를 생성해서 변수에 할당
		} catch (ArithmeticException ex) { // exception처리가 되면 프로그램은 정상 진행됨, 미처리-중지
			System.out.println(ex.getMessage());
		}
		System.out.println(result);
		sc.close();
	}

	/*
	 * private static void method4() { int a = 5; int b = 0; // 개발시에는 값을 할당하는 것이
	 * 아니므로 컴파일 오류는 없음, 실행오류 int result = a / b; // ArithmeticException, 정수는 0으로 나눌
	 * 수 없 }// 실행 오류 시 프로그램 중지됨, 프로그램은 정상 종료되어야 함 // JVM이 RuntimeException을
	 * 처리해준다.발자가 처리하지 않아도 된다. // Exception 처리를 한다. 오류없도록 값 체크.Exception처리.
	 * 
	 * /* int result =0; if(b!=0) result = a/b; 이러면 에러 안남...
	 * 
	 * try{ exception이 일어날 가능성이 있는 문장을 넣 result = a/b; } catch(ArithmeticException
	 * ex){ Exception처리 }
	 * 
	 * 
	 * 
	 */
	/*
	 * private static void method3() { int apple = 1; double pieceUnit = 0.1; int
	 * number = 7; double result = apple - number * pieceUnit;
	 * System.out.println("사과1개에서 남은양" + result); } // 부정확함
	 * 
	 * private static void method2() { int a = 10, b = 3; System.out.println(++a);
	 * System.out.println(a++);
	 * 
	 * }
	 * 
	 * private static void method1() { int a = 10, b = 3; System.out.println(++a +
	 * b);// 전위연산자는 증감 후 연산 System.out.println(a++ + b);// 연산 후 증감
	 * 
	 * a = a + 1;
	 * 
	 * ++b; b++; // 한개만 있을 때는 앞이든 뒤든 관계없음, 여러 개 있을 떄 신경써야 함
	 * 
	 * System.out.println("a=" + a); System.out.println("b=" + b);
	 * 
	 * }
	 */

}
